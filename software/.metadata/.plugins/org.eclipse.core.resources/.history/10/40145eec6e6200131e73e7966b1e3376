#include "terasic_includes.h"
#include "gui.h"
#include "vip_fr.h"
#include "multi_touch.h"
#include "simple_graphics.h"
#include "geometry.h"
#include "gesture.h"
#include "sensor.h"
#include "solar_gui_configs.h"

extern const struct bmp_struct gesture_bmp;

#define ENALBE_TOUCH_FILTER
//#define DUAL_FRAME_BUFFER

#define FRAME_WIDTH  800
#define FRAME_HEIGHT 480
#define DOT_SIZE    6
#define FR_FRAME_0  (SDRAM_BASE)
#define FR_FRAME_1  (SDRAM_BASE + FRAME_WIDTH*FRAME_HEIGHT*4)

// Since we are only using FR_FRAME_1, can use the space from frame0.
#define DATA_START 	(SDRAM_BASE)


// The maximum number of samples that will be stored.
#define MAX_NUM_SAMPLES					   120
int samples[MAX_NUM_SAMPLES];
// When the sampling rate and duration is smaller than MAX_NUM_SAMPLES.
int curr_sample_index = 0;
int curr_current_index = 0;

// Amount of charge



// Sensor Variables
// ADC
ADC a0,a1,a2;
// Clock
int isHigh;

// Times for the graph.
int time_axis[MAX_NUM_SAMPLES];
int res_opts_count = 3;
int wind_opts_count = 3;


// Set to 1 when the graph needs to be updated.
int UPDATE_GRAPH_FLAG = 0;

// How often to update the graph, in seconds.
float current_resolution = 1;
// Seconds to store data, in seconds.
int current_window_duration = 10;

// Keep track of the old state.
float old_current_resolution = 1;
int old_current_window_duration = 10;


// Stuff to print
//char * char_res_opts[NUM_OPTIONS];
char battery_capacity[] = "000000";
char battery_level[] = "000.00";
char panel_voltage[] = "1.00";
char battery_time_left[] = "000.00";
char charge_state[] = "Discharging";
char * char_data[] = {battery_capacity, battery_level, panel_voltage, battery_time_left};
float floating_bat_level = 0.0;
int update_array = 0;

// Variables to calculate battery stats
// Frequency in hertz
int current_sample_frequency = 500;
int sliding_size  = 5;
signed long current_samples[] = {0, 0, 0, 0, 0};
int UPDATE_CURRENT_FLAG = 0;
float current_charge = 9.72375;

int updated_once = 0;

float average_current = 0.0;

// Alarm for sampling current
static alt_alarm current_alarm;
alt_u32 current_alarm_callback ( void* context)
{
	UPDATE_CURRENT_FLAG = 1;
	return (int)(alt_ticks_per_second() / (float)current_sample_frequency);
}

int get_max(const int* arr, int arr_length)
{
  int i;
  int max = arr[0];
  for(i = 1; i < arr_length; ++i)
  {
    if(arr[i] >= max)
    {
      max = arr[i];
    }
  }
  return max;
}



// Test drawing to screen with alarm
static alt_alarm graph_alarm;
alt_u32 my_alarm_callback ( void* context)
{
	UPDATE_GRAPH_FLAG = 1;
	return (int)(alt_ticks_per_second() * current_resolution);
}


float get_scale_factor(int abs_dim, int max_val)
{
  return abs_dim / (float)max_val;
}


// Adds a new sample to the list, returning the replaced one.
void add_sample(int * array, float new_sample, int values,int * sample_index) {
	if((*sample_index) >= values) {
		(*sample_index) = 0;
	}
	array[(*sample_index)] = new_sample;
	(*sample_index) ++;
}

void add_samples_long(signed long * array, signed long new_sample, int values, int * sample_index) {
	if((*sample_index) >= values) {
			(*sample_index) = 0;
		}
		array[(*sample_index)] = new_sample;
		(*sample_index) ++;
}

void plot(int x_offset, const int* x_data, float scale_factor_x, int y_offset,
    const int* y_data, float scale_factor_y, int values, int color,  alt_video_display* display  )
{
  int i;
  // Plot the points
  for(i = 1; i < values; ++i)
  {
//    point(x_offset + x_data[i] * scale_factor_x,
//        y_offset + y_data[i] * scale_factor_y);
    vid_draw_line(x_offset + (int)(x_data[i-1] * scale_factor_x),
        y_offset - (int)(y_data[i-1] * scale_factor_y),
        x_offset + (int)(x_data[i] * scale_factor_x),
        y_offset - (int)(y_data[i] * scale_factor_y),
        1,
        color,
        display);
  }
}

// Values is curr_sample_durration / curr_sample_interval.
// Call add_sample before calling this.
void sliding_plot(int x_offset, const int* x_data, float scale_factor_x, int y_offset,
    const int* y_data, float scale_factor_y, int values, int color,  alt_video_display* display) {
	// TODO Need to paint over the old lines and then refresh !
	int i;
	int curr_index;
	int curr_index_prev;

	// Get the correct indices depending on value of curr_sample_index.
	if(curr_sample_index == values) {
		curr_index = 1;
		curr_index_prev = 0;
	}
	else {
		curr_index_prev = curr_sample_index;
		if(curr_sample_index == values - 1) {
			curr_index = 0;
		} else {
			curr_index = curr_sample_index + 1;
		}
	}

	for(i = 1; i < values; ++i) {
		vid_draw_line(x_offset + (int)(x_data[i-1] * scale_factor_x),
		        y_offset - 1 - (int)(y_data[curr_index_prev] * scale_factor_y),
		        x_offset + (int)(x_data[i] * scale_factor_x),
		        y_offset - 1 - (int)(y_data[curr_index] * scale_factor_y),
		        1,
		        color,
		        display);

		// Update the index values appropriately.
		curr_index++;
		curr_index_prev++;
		if(curr_index == values) {
			curr_index = 0;
		}
		if(curr_index_prev == values) {
			curr_index_prev = 0;
		}
	}
}

void draw_options(VIP_FRAME_READER *pReader, RECT* ok_button, RECT * res_opt_buttons, RECT * wind_opt_buttons) {
	vid_draw_box(OFFSET_HORIZ_MENU_OPTION,
			OFFSET_VERT_MENU_OPTION,
			OFFSET_HORIZ_MENU_OPTION + HORIZ_LENGTH_MENU_OPTION,
			OFFSET_VERT_MENU_OPTION + VERT_LENGTH_MENU_OPTION,
			BG_COLOR_MENU_OPTION, 1, pReader);

	vid_print_string_alpha(OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER,
			OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER,
			TEXT_COLOR_OPTION,
			BG_COLOR_MENU_OPTION,
			tahomabold_20, pReader, "Options");

	// Format will be:

	int resolution_header_vert_offset = 30;
	// Draw resolution header
	vid_print_string_alpha(OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER,
				OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + resolution_header_vert_offset,
				TEXT_COLOR_OPTION,
				BG_COLOR_MENU_OPTION,
				tahomabold_20, pReader, "Resolution Options");

	// Draw res options

	int i;
	for(i = 0; i < res_opts_count; ++i) {

		vid_print_string_alpha(OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER + i * resolution_options_horiz_offsets,
						OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + resolution_options_vert_offset,
						TEXT_COLOR_OPTION,
						BG_COLOR_MENU_OPTION,
						tahomabold_20, pReader, char_res_opts[i]);
	}

	// Draw Window Header

	vid_print_string_alpha(OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER,
					OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + window_header_vert_offset,
					TEXT_COLOR_OPTION,
					BG_COLOR_MENU_OPTION,
					tahomabold_20, pReader, "Window Options");
	// Use the same vert and horiz offsets as from resolution


	for(i = 0; i < 3; ++i) {
//		sprintf(digits, "%d", wind_opts[i]);
		vid_print_string_alpha(OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER + i * resolution_options_horiz_offsets,
								OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + window_header_vert_offset + window_opts_vert_offset,
								TEXT_COLOR_OPTION,
								BG_COLOR_MENU_OPTION,
								tahomabold_20, pReader, char_wind_opts[i]);

	}

	// Set button hit area
	RectSet(ok_button,
	    		OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_BUTTON_OK,
	    		OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_BUTTON_OK + BTN_HORIZ_LENGTH_OK,
	    		OFFSET_VERT_MENU_OPTION + VERT_LENGTH_MENU_OPTION + REL_VERT_OFFSET_BUTTON_OK,
	    		OFFSET_VERT_MENU_OPTION + VERT_LENGTH_MENU_OPTION + REL_VERT_OFFSET_BUTTON_OK + BTN_VERT_LENGTH_OK);

    // Draw the button
    vid_draw_box(OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_BUTTON_OK,
    		OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_BUTTON_OK,
    		BTN_HORIZ_LENGTH_OK,
    		BTN_VERT_LENGTH_OK,
    		BTN_BG_COLOR_OK,
    		1, pReader);

    vid_print_string_alpha(OFFSET_HORIZ_MENU_OPTION + BTN_OFFSET_HORIZ_TEXT_OK,
    		OFFSET_VERT_MENU_OPTION + VERT_LENGTH_MENU_OPTION + BTN_OFFSET_VERT_TEXT_OK,
    		BTN_TEXT_COLOR_OK,
    		BTN_BG_COLOR_OK,
    		tahomabold_20, pReader, "OK");

}


int GUI_CheckButton(POINT *pt, RECT * rc_button){

    if(IsPtInRect(pt, rc_button))
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void drawStats(VIP_FRAME_READER *pReader) {

	int i;
	for(i = 0; i < NUM_OPTIONS; ++i)
	{
		// Refresh old
		vid_print_string_alpha(STAT_OFFSET_HORIZ,
						STAT_OFFSET_VERT + (i * VERT_SPACING_INFO),
						BG_COLOR, BG_COLOR, tahomabold_20, pReader, "000000000");
		if(i == NUM_OPTIONS - 1) {
			vid_print_string_alpha(STAT_OFFSET_HORIZ,
							STAT_OFFSET_VERT + (i * VERT_SPACING_INFO),
							COLOR_INFO_TEXT, BG_COLOR, tahomabold_20, pReader, charge_state);
		} else {
			vid_print_string_alpha(STAT_OFFSET_HORIZ,
							STAT_OFFSET_VERT + (i * VERT_SPACING_INFO),
							COLOR_INFO_TEXT, BG_COLOR, tahomabold_20, pReader, char_data[i]);
		}
	}
}


void GUI_DeskDraw(VIP_FRAME_READER *pReader, RECT* rc_button){
    RECT rc;
    

    // Draw the background
    vid_draw_box(0, 0, FRAME_WIDTH, FRAME_HEIGHT, BG_COLOR, 1, pReader);

    // Draw the Title Bar
    vid_draw_box(0, 0, FRAME_WIDTH, VERT_LENGTH_TITLE_BAR, BG_COLOR_TITLE_BAR, 1, pReader);
    vid_print_string_alpha(OFFSET_HORIZ_TITLE_TEXT,
    		OFFSET_VERT_TITLE_TEXT,
    		COLOR_TITLE_TEXT,
    		BG_COLOR_TITLE_BAR,
    		tahomabold_20, pReader, "Solar Car Status Screen");
    
    // Draw the button
    vid_draw_box(BTN_OFFSET_HORIZ_OPTIONS,
    		BTN_OFFSET_VERT_OPTIONS,
    		BTN_HORIZ_LENGTH_OPTIONS,
    		BTN_VERT_LENGTH_OPTIONS,
    		BTN_BG_COLOR_OPTIONS,
    		1, pReader);

    vid_print_string_alpha(BTN_OFFSET_HORIZ_TEXT_OPTIONS,
    		BTN_OFFSET_VERT_TEXT_OPTIONS,
    		BTN_TEXT_COLOR_OPTIONS,
    		BTN_BG_COLOR_OPTIONS,
    		tahomabold_20, pReader, "Options");
    
    const char * OPTIONS[NUM_OPTIONS];
	OPTIONS[0] = "Battery Capacity";
	OPTIONS[1] = "Battery Level";
	OPTIONS[2] = "Panel Voltage";
	OPTIONS[3] = "Battery Time Left";
	OPTIONS[4] = "Discharge State";
    
    // Draw the info
    int i;
    for(i = 0; i < NUM_OPTIONS; ++i)
    {
        vid_print_string_alpha(LABEL_OFFSET_HORIZ,
        		LABEL_OFFSET_VERT + (i * VERT_SPACING_INFO),
        		COLOR_INFO_TEXT, BG_COLOR, tahomabold_20, pReader, OPTIONS[i]);
    }

    drawStats(pReader);

    // Set button rect dims

    RectSet(rc_button,
    		BTN_OFFSET_HORIZ_OPTIONS,
    		BTN_OFFSET_HORIZ_OPTIONS + BTN_HORIZ_LENGTH_OPTIONS,
    		BTN_OFFSET_VERT_OPTIONS,
    		BTN_OFFSET_VERT_OPTIONS + BTN_VERT_LENGTH_OPTIONS);

    // Draw the axes
    // X-AXIS
    vid_draw_line(GRAPH_BOT_HORIZ_OFFSET,
    		GRAPH_BOT_VERT_OFFSET,
    		GRAPH_BOT_HORIZ_OFFSET + GRAPH_HORIZ_LENGTH,
    		GRAPH_BOT_VERT_OFFSET, 1, AXIS_COLOR, pReader);
    // Y-AXIS
    vid_draw_line(GRAPH_BOT_HORIZ_OFFSET,
    		GRAPH_BOT_VERT_OFFSET,
    		GRAPH_BOT_HORIZ_OFFSET,
    		GRAPH_BOT_VERT_OFFSET - GRAPH_VERT_LENGTH,
    		1, AXIS_COLOR, pReader);

    // Draw the title of the graph
    vid_print_string_alpha(OFFSET_HORIZ_GRAPH_TITLE,
    			OFFSET_VERT_GRAPH_TITLE,
    			TEXT_COLOR_OPTION,
    			BG_COLOR,
    			tahomabold_20, pReader, "Panel Voltage (V)");

}




void GUI(MTC_INFO *pTouch){
    // video
//    DESK_INFO DeskInfo;
	initSensorVars(&isHigh);
	initializePorts(&a0, &a1, &a2);
	int option_selected = 0;
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2;
    POINT Pt1, Pt2, ptGesture;
    alt_u8 Event, TouchNum, LedMask = 0x01;
    const int nDotSize = DOT_SIZE;
    RECT rcTouch;
    // Set the rectangle for the button
    RECT rc_button;
    RECT ok_button;
    RECT res_opt_buttons[3];
    RECT wind_opt_buttons[3];
    int ColorPen0, ColorPen1, ButtonId, ButtonId2;
    bool UpdatePalette;
    int * data = (int *) DATA_START;
    int curr_res_opt_selected = 1;
    int curr_wind_opt_selected = 1;


    int i;
    for(i = 0; i < res_opts_count; ++i) {
    RectSet(&(res_opt_buttons[i]),
    			    		OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER + i * resolution_options_horiz_offsets,
    			    		OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER + i * resolution_options_horiz_offsets + res_opt_horiz_length,
    			    		OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + resolution_options_vert_offset,
    			    		OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + resolution_options_vert_offset + res_opt_vert_length);

    RectSet(&(wind_opt_buttons[i]),
    				    		OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER + i * resolution_options_horiz_offsets,
    				    		OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER + i * resolution_options_horiz_offsets + wind_opt_horiz_length,
    				    		OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + window_header_vert_offset + window_opts_vert_offset,
    				    		OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + window_header_vert_offset + window_opts_vert_offset + res_opt_vert_length);

    }

    // Initialize the graph for the first time.
	for(i = 0; i < (int) (current_resolution * current_window_duration); ++i) {
		// Make sure what is being plotted is an int.
		time_axis[i] = (int) (2 * current_resolution * i);
		samples[i] = 0;
	}


	//checks that clock is still working, calls interrupt
	if (alt_alarm_start (&graph_alarm,
			alt_ticks_per_second(),
			my_alarm_callback,
			NULL) < 0)
	{
		printf ("No system clock available\n");
	}

	//checks that clock is still working, calls interrupt
	if (alt_alarm_start (&current_alarm,
			alt_ticks_per_second(),
			current_alarm_callback,
			NULL) < 0)
	{
		printf ("No system clock available\n");
	}
#ifdef ENALBE_TOUCH_FILTER    
    POINT LastPt1, LastPt2;
    alt_u32 LastTimePt1=0,LastTimePt2=0; 
    const alt_u32 ContinuedTime = alt_ticks_per_second()/50;
#endif    
    
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_1, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
    
   
    //GUI_DeskInit(pReader, &DeskInfo);
    GUI_DeskDraw(pReader, &rc_button);
    
    VIPFR_ActiveDrawFrame(pReader);
    
//    RectCopy(&rcTouch, &DeskInfo.rcPaint);
//    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);

    
    while(1){
    	// Sensor reading
    	// TODO Get rid of this sleep

    	// Pin 1 = Voltage of battery
    	// Pin 2 = Current of the battery
    	// Pin 3 = Voltage of solar cell
    	readadc(&a0, &isHigh, PIN_NUM_BATTERY_VOLTAGE);
    	readadc(&a1, &isHigh, PIN_NUM_BATTERY_CURRENT);
    	readadc(&a2, &isHigh, PIN_NUM_CELL_VOLTAGE);
    	vin(&a0);
    	iin(&a1);
    	vin(&a2);

    	usleep(100);

    	if(UPDATE_CURRENT_FLAG) {
    		updated_once = 1;
    		// Update current
    		add_samples_long(current_samples, a1.iin + 4000, sliding_size, &curr_current_index);
    		// Calculate the average current
    		int i;
    		long sum = 0;
    		for(i = 0; i < sliding_size; ++i) {
    			//printf("current_samples[%d] = %ld\n", i, current_samples[i]);
    			sum += (current_samples[i]);
    		}
    		printf("sum: %ld \n", sum );
    		float average = (float)(sum) / (sliding_size);
    		average = average * 2 / (60 * 60 * 1000);
    		average_current = current_samples[3] * 2 / (60 * 60 * 1000);
    		current_charge -= average;
    		floating_bat_level = (int)(current_charge * 100) / 9.72375;
    		UPDATE_CURRENT_FLAG = 0;
    	}

    	////// UPDATE THE DISPLAY //////
    	sprintf(panel_voltage, "%4.2f", ((float)(a2.vin) / (float) (1280)) * 5 * 28);
    	sprintf(battery_capacity, "%6.2f", current_charge);
    	if(updated_once){
    		sprintf(battery_level, "%4.2f %%", floating_bat_level);
//    		printf("%f, %f, %f \n",current_charge, INITIAL_CHARGE, current_charge / INITIAL_CHARGE);
    	} else {
    		sprintf(battery_level, "%4.2f %%", 100.0);

    	}
    	if(updated_once) {
			printf("read_data_r: %d iin :%ld avg: %f\n",a1.readDataR, a1.iin, average_current);
    	}

    	// For battery life remaining
//    	printf("iin is : %d\n", a1.iin);
    	if(a1.iin > -3700) {
    		if(updated_once) {
				strcpy(charge_state, "Discharging");
				if(a1.iin > -3200) {
//					sprintf(battery_time_left, "%f", current_charge / average_current);
				}
				else {
		    		strcpy(battery_time_left,  "N/A.");
				}
    		}

    	} else {
    		if(a1.iin < -6000) {
        		strcpy(charge_state, "Charging");
    		} else {
        		strcpy(charge_state, "No Load");
    		}
    		strcpy(battery_time_left,  "N/A.");
    	}

    	////////////

    	if(UPDATE_GRAPH_FLAG) {
    		// Update the samples
    		int num_samples = (int)(current_window_duration / current_resolution);
    		add_sample(samples,a2.vin, num_samples, &curr_sample_index);

    		// Clean previous graph
			vid_draw_box(GRAPH_BOT_HORIZ_OFFSET + 1,
						GRAPH_BOT_VERT_OFFSET - 2 - GRAPH_VERT_LENGTH,
						GRAPH_BOT_HORIZ_OFFSET + 3 + GRAPH_HORIZ_LENGTH,
						GRAPH_BOT_VERT_OFFSET,
						BG_COLOR,
						1, pReader);

    	    // Draw the graph
    		int max_x = get_max(time_axis, num_samples);
    		int max_y = get_max(samples, num_samples);
    		float scale_factor_x = get_scale_factor(GRAPH_HORIZ_LENGTH, max_x);
    		float scale_factor_y = get_scale_factor(GRAPH_VERT_LENGTH, max_y);

    		// Print the maximum value at this moment.
    	    vid_print_string_alpha(OFFSET_HORIZ_GRAPH_INFO,
    	    			OFFSET_VERT_GRAPH_INFO,
    	    			TEXT_COLOR_OPTION,
    	    			BG_COLOR,
    	    			tahomabold_20, pReader, "Current Maximum: ");

    	    char max_char = "0.00";
        	sprintf(max_char, "%4.2f", ((float)(max_x) / (float) (1280)) * 5 * 28);
    	    vid_print_string_alpha(OFFSET_HORIZ_GRAPH_INFO,
    	        	    			OFFSET_VERT_GRAPH_INFO + 35,
    	        	    			TEXT_COLOR_OPTION,
    	        	    			BG_COLOR,
    	        	    			tahomabold_20, pReader, max_char);


    		sliding_plot(GRAPH_BOT_HORIZ_OFFSET, time_axis, scale_factor_x,
    				GRAPH_BOT_VERT_OFFSET, samples, scale_factor_y, num_samples,
    				PLOT_COLOR, pReader);

    		UPDATE_GRAPH_FLAG = 0;
    	}

    	if(update_array) {

			// Only refresh if there has been a change.
			int i;
			for(i = 0; i < MAX_NUM_SAMPLES; ++i) {
				// Make sure what is being plotted is an int.
				time_axis[i] = (int) (2 * current_resolution * i);
				samples[i] = 0;
			}
			// Clean previous graph
			vid_draw_box(GRAPH_BOT_HORIZ_OFFSET + 1,
						GRAPH_BOT_VERT_OFFSET - 2 - GRAPH_VERT_LENGTH,
						GRAPH_BOT_HORIZ_OFFSET + 3 + GRAPH_HORIZ_LENGTH,
						GRAPH_BOT_VERT_OFFSET,
						BG_COLOR,
						1, pReader);
			update_array = 0;

			// Reset indices
			curr_sample_index = 0;

		}

    	// Redraw info
    	drawStats(pReader);


		// touch
		if (MTC_GetStatus(pTouch, &Event, &TouchNum, &X1, &Y1, &X2, &Y2)){
			PtSet(&Pt1, X1, Y1);
			if(!option_selected) {
				if(TouchNum == 1 && GUI_CheckButton(&Pt1, &rc_button)) {
					printf("Options.");
					option_selected = 1;
					draw_options(pReader, &ok_button, res_opt_buttons, wind_opt_buttons);
				}
			}
			else {

				// Check and set the resolution and window options
				int i;
				for(i = 0; i < res_opts_count; ++i) {
					if(TouchNum == 1 && GUI_CheckButton(&Pt1, &(res_opt_buttons[i]))){
						curr_res_opt_selected = i;
						printf("Selected res: %d", i);
					}
				}

				int color_to_draw = TEXT_COLOR_OPTION;
				for(i = 0; i < res_opts_count; ++i) {
					if(i == curr_res_opt_selected) {
						color_to_draw = TEXT_COLOR_SELECTED;
					} else {
						color_to_draw = TEXT_COLOR_OPTION;
					}
					vid_print_string_alpha(OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER + i * resolution_options_horiz_offsets,
									OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + resolution_options_vert_offset,
									color_to_draw,
									BG_COLOR_MENU_OPTION,
									tahomabold_20, pReader, char_res_opts[i]);
				}


				for(i = 0; i < wind_opts_count; ++i) {
					if(TouchNum == 1 && GUI_CheckButton(&Pt1, &(wind_opt_buttons[i]))){
						curr_wind_opt_selected = i;
						printf("Selected wind: %d", i);
					}
				}

				for(i = 0; i < res_opts_count; ++i) {
					if(i == curr_wind_opt_selected) {
						color_to_draw = TEXT_COLOR_SELECTED;
					} else {
						color_to_draw = TEXT_COLOR_OPTION;
					}
					vid_print_string_alpha(OFFSET_HORIZ_MENU_OPTION + REL_HORIZ_OFFSET_OPTION_HEADER + i * resolution_options_horiz_offsets,
													OFFSET_VERT_MENU_OPTION + REL_VERT_OFFSET_OPTION_HEADER + window_header_vert_offset + window_opts_vert_offset,
													color_to_draw,
													BG_COLOR_MENU_OPTION,
													tahomabold_20, pReader, char_wind_opts[i]);
				}


				// Check for the OK button
				if(TouchNum == 1 && GUI_CheckButton(&Pt1, &ok_button)) {
					option_selected = 0;
					// Change the color.
					// Reset selected options?
					current_resolution = res_opts[curr_res_opt_selected];
					current_window_duration = wind_opts[curr_wind_opt_selected];
					// Populate the time_axis depending on the res and wind options:
					if((int)old_current_resolution != (int)current_resolution) {
						update_array = 1;
					}

					GUI_DeskDraw(pReader, &rc_button);
				}
			}
    	}
    }
}


