#include "sensor.h"


////////// VARS YOU NEED
// ADC
//ADC a0,a1,a2;
////
//int isHigh;

//////////////


///////////////////////////////// main
//int main(void) {
//	initializePorts();
//
//	while(1){
//		readadc(&a0);
//		readadc(&a1);
//		readadc(&a2);
//		iin(&a0);
//		printf("%ld \n",a0.iin);
//		usleep(1000000);
//	}
//}

///////////////////////////////////

void initSensorVars(int isHigh){
	isHigh = 0;
}

void initializePorts(ADC * a0, ADC * a1, ADC * a2){
	//initially 0
	IOWR_ALTERA_AVALON_PIO_DATA(CLKPIN, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(CSENABLE, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(CSE2, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(CSE3, 0);
	//ADC0
	a0->readDataR = 0;
	a0->vin = 0;
	//ADC1
	a1->readDataR = 0;
	a1->vin = 0;
	//ADC2
	a2->readDataR = 0;
	a2->vin = 0;


}
void readadc(ADC *a, int isHigh) {
	//set CS bit high to start reading ---> CS_B = low
	IOWR_ALTERA_AVALON_PIO_DATA(CSENABLE, 0);
	unsigned char data = 0x00;

	//read the byte bit by bit
	int i = 0;
	for (i=0; i<8; i++){
		data <<= 1;
		if (IORD_ALTERA_AVALON_PIO_DATA(MISO) == 1){ printf("1");
		data |= 1;}
		else { printf("0");
		data &= ~1;}
		toggleClock(isHigh); //change SCLK
		usleep(10);// not sure if some delaycycle is necessary  ---> from cursorily test, we dont need delay cycles
		toggleClock(isHigh); //change SLCK
		usleep(10);
	}
	printf("\n");
	printf("%u\n",data);
	a->readDataR = data;

	//finisih reading by setting CS bit low ----> CS_B = high
	IOWR_ALTERA_AVALON_PIO_DATA(CSENABLE, 1);
}

void toggleClock(int isHigh){
	if(isHigh){
		isHigh = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(CLKPIN, 0);
	} else {
		isHigh =1;
		IOWR_ALTERA_AVALON_PIO_DATA(CLKPIN, 1);
	}
}

void vin(ADC *a){
	a->vin = estimateV(0,0,a->readDataR);
}

long estimateV(int i, long curVin, int tempData){
	//base case
	if( (i>=8) || (tempData == 0) ){
		return curVin;
	}

	if(tempData >= reffVTable[i]){ //if current data is more than current reference scale
		tempData -= reffVTable[i]; //update tempData
		curVin += voltageTable[i]; //update current Vin
	}


	i++;

	return estimateV(i,curVin,tempData);
}

void iin(ADC *a){
	a->iin = estimateI(0,0,a->readDataR,0);
}

long estimateI(int i,  long curIin, unsigned long tempData, long sign){
	//base case
	if( (i>=17) || (tempData == 0) ){
	//	printf("finish");
		return curIin * sign;
	}
	//first loop to cut down the size of current
	if(i==0){
		if(tempData < 130){ //if digital data is less than 130
		//	printf("case2");
			tempData = 130-tempData;
			sign = -1;
		} else if(tempData >130) { //if digital data is more than 130
		//	printf("case1");
			tempData -= 130;
			sign = 1;
		}else {
		//	printf("case0");
			return 0;
		}
		tempData <<=13; //adjust resolutoin of the number
	} //case when tempData == 0 is already weed out at the base case

	if(tempData >= reffITable[i]){ //if current data is more than current reference scale
		tempData -= reffITable[i]; //update tempData
		curIin += currentTable[i]; //update current Iin
		//printf("%lu \n",tempData);
		//printf("%ld \n",curIin);
	}
//	printf("none");

	i++;

	return estimateI(i,curIin,tempData,sign);
}

