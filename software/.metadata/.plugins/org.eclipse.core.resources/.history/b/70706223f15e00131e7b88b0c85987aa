#ifndef SENSOR_H_
#define SENSOR_H_

#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "unistd.h" //Sleep/usleep
#include <stdio.h>
#include <stddef.h>
#include "alt_types.h"
#include "sys/alt_alarm.h"

//////////////////////// definitions //////////////////////////////////////
#define CLKPIN	PIO_0_BASE
#define CSENABLE PIO_2_BASE
#define	MISO	PIO_1_BASE
#define CSE2 	CSE_3_BASE
#define	MISO2	MISO_2_BASE
#define CSE3 	CSE_3_BASE
#define	MISO3	MISO_3_BASE

#define CLK BIT0			//2.0 (MSP) //shared clock
#define CLK_TEST BIT5		//1.5 (MSP)
#define HALF_PERIOD (15625)	//0.5 second

#define ALARMTICKS(x) (alt_ticks_per_second()/(x))

//CORDIC estimation for raw values
const long voltageTable[8] = {640,320,160,80,40,20,10,5}; //max voltage is 5V. max scale is 2.5 => 2.5*2^8 = 640
const int reffVTable[8] = {128,64,32,16,8,4,2,1}; //max input is 255
const long currentTable[17] = {65536,32768,16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1}; //analog current value
//max = 16*2^12 = 65536, min = 0.000244141
const long reffITable[17] = {290909,145455,72727,36364,18182,9091,4545,2273,1136,568,284,142,71,36,18,9,4}; //digital current(2^11)

const long testTable[8] = {200,184,128,71,45,215,241,255};

//ADC
typedef struct{
	///////////port def/////////////
	//shared across all the ICs/main board
	char clk; //clock output MSP -> ADC// this will be share across the main board and other ADCs
	//unique for each ICs
	char cs; //Enable channel from MSP -> ADC //This will be unique for each ADC
	char data_in; //Data input from ADC -> MSP //This will be unique for each ADC

	//////////data/////////////////
	unsigned char readDataR; //digital value (raw) from ADC
	unsigned long vin; //analog decoded value vin from ADC
	long iin; //analog decode value iin from ADC
}ADC;

/////////////////////////method prototype ///////////////////////////////////
void initializeVariables();
void initializePorts();
void toggleClock();
void readadc(ADC *a);
void vin(ADC *a); //analyze readDataR and update vin
void iin(ADC *a); //analyze readDataR and update iin
long estimateV(int i,long curVin,int tempData); //recursive method for estimating vin digital value => analog value
long estimateI(int i, long curIin, unsigned long tempData,long sign); //recursive method for estimating Iin digital value => analog value
volatile long k = 0;


#endif /* SENSOR_H_ */
